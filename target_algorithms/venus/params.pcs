#Gurobi parameters
##General parameters from Gurobi
threads             integer [1, 1] [1] # how many threads to use
auto_issmethod_on     categorical {0, 1} [1]
issmethod             categorical {-1, 0, 1, 2, 3} [-1] # method for computing IIS

##Parameters related to presolve
auto_presolve_on    categorical {0, 1} [1]
presolve            integer [0, 2] [1]      # three levels of presolve in ascending order of aggressiveness
auto_aggfill_on     categorical {0, 1} [1] # TODO figure out sensible upper bound and default
aggfill             integer     [1, 2048] [1024]  # int in [0, MAXINT]
aggregate       categorical {0, 1} [1]    # on or off
dualreductions  categorical {0, 1} [1]    # on or off
precrush        categorical {0, 1} [0]    # on or off
predeprow       categorical {-1, 0, 1} [-1]    # on or off
auto_predual_on     categorical {0, 1} [1]
predual             categorical {0, 1, 2} [0]    # three types of model dualisation 
auto_prepasses_on   categorical {0, 1} [1]
prepasses           integer     [1, 64] [16] log # int in [0, MAXINT], values inspired by http://www.cs.ubc.ca/labs/beta/Projects/MIP-Config/gurobi_params.txt
auto_presparsify_on  categorical {0, 1} [1]
presparsify          categorical {0, 1} [0]    # on or off

##Barrier only parameters 
crossoverbasis       categorical {0,1} [0]
auto_barcorrectors  categorical {0,1} [1]
barcorrectors       integer [0, 2000000] [1000000]
auto_barhomogeneous  categorical {0,1} [1]
barhomogeneous       categorical {0,1} [0]
auto_barorder  categorical {0,1} [1]
barorder       categorical {0,1} [0]
auto_crossover  categorical {0,1} [1]
crossover       categorical {0,1, 2, 3, 4} [0]

##LP only parameters
infunbdinfo categorical {0, 1} [0]
perturbvalue real [0.000004, 0.01] [0.0002] log   # double between 0 and infinity, domain and values inspired by http://www.cs.ubc.ca/labs/beta/Projects/MIP-Config/gurobi_params.txt
auto_normadjust_on categorical {0, 1} [1]
normadjust         categorical {0, 1, 2, 3} [0]   # four different simplex pricing norms
auto_quad_on  categorical {0, 1} [1]
quad          categorical {0, 1} [0]    # simplex quad precision control
auto_sifting_on categorical {0, 1} [1]
sifting         integer     [0, 2] [1]   # increasing levels of sifting aggressiveness
auto_siftmethod_on categorical {0, 1} [1]
siftmethod         categorical {0, 1, 2} [1]    # three different types of sifting
auto_simplexpricing_on categorical {0, 1} [1]
simplexpricing         categorical {0, 1, 2, 3} [0]   # three strategies for simplex pricing

##MIP only parameters
heuristics        real [0.005, 1] [0.05] log   # double in [0, 1], values inspired by http://www.cs.ubc.ca/labs/beta/Projects/MIP-Config/gurobi_params.txt
improvestartgap   real [0, 1] [0]    # double in [0, 1], values inspired by http://www.cs.ubc.ca/labs/beta/Projects/MIP-Config/gurobi_params.txt TODO: check if upper bound makes sense
improvestartnodes real [0, 2000000] [2000000] 
improvestarttime  real [1, 2000000] [2000000]    # upper bound based on expected cutoff time. What do you think about this, Daniel?
mipfocus          categorical {0, 1, 2, 3} [0]   # four different high-level solution strategies
submipnodes       integer     [125, 2000] [500] log  # int in [0, MAXINT], values inspired by http://www.cs.ubc.ca/labs/beta/Projects/MIP-Config/gurobi_params.txt
partitionplace    categorical  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31} [15]   # bitmasks which determine when to partition (before and/or after node etc)
auto_branchdir_on  categorical {0, 1} [1]
branchdir          categorical {-1, 1} [1]    # branch down or up first
auto_degenmoves_on categorical {0, 1} [1]
degenmoves         integer     [0, 2000000] [1000000] # int in [0, MAXINT]
auto_disconnected_on categorical {0, 1} [1]
disconnected         integer     [0, 2] [1]   # increasing levels of disconnected component strategy aggressiveness
auto_minrelnodes_on categorical {0, 1} [1]
minrelnodes         integer     [0, 2000000] [1000000] # int in [0, MAXINT]
auto_nodemethod_on categorical {0, 1} [1]
nodemethod         categorical     {0, 1, 2} [1]        # MIP node relaxations: prime simplex, dual simplex, barrier    # TODO: figure out if this also affects other parameters
auto_pumppasses_on categorical {0, 1} [1]
pumppasses         integer     [1, 64] [16] log     # int in [0, MAXINT], values inspired by http://www.cs.ubc.ca/labs/beta/Projects/MIP-Config/gurobi_params.txt
auto_rins_on  categorical {0, 1} [1]
rins          integer     [1, 64] [16] log      # int in [0, MAXINT], values inspired by http://www.cs.ubc.ca/labs/beta/Projects/MIP-Config/gurobi_params.txt
auto_startnodelimit           categorical {0, 1} [1]
startnodelimit integer        [0, 2000000] [1000000] # int in [0, MAXINT]
auto_symmetry_on categorical {0, 1} [1]
symmetry         integer     [0, 2] [1]   # increasing levels of MIP symmetry detection aggressiveness
auto_varbranch_on categorical {0, 1} [1]
varbranch         categorical {0, 1, 2, 3} [0]         # different types of variable branching selection strategies
auto_zeroobjnodes_on    categorical {0, 1} [1]
zeroobjnodes    integer     [0, 2000000] [1000000] # int in [0, MAXINT]


##MIP cuts parameters
auto_cuts_on categorical {0, 1} [1]
cuts         integer     [0, 3] [1]   # in increasing order of cut generation aggressiveness
auto_bqpcuts_on categorical {0, 1} [1]
bqpcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_cliquecuts_on categorical {0, 1} [1]
cliquecuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_covercuts_on categorical {0, 1} [1]
covercuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_cutaggpasses_on  categorical {0, 1} [1]
cutaggpasses          integer     [1, 64] [16] log      # int in [0, MAXINT], values inspired by http://www.cs.ubc.ca/labs/beta/Projects/MIP-Config/gurobi_params.txt
auto_cutpasses_on  categorical {0, 1} [1]
cutpasses          integer     [1, 64] [16] log      # int in [0, MAXINT], values inspired by http://www.cs.ubc.ca/labs/beta/Projects/MIP-Config/gurobi_params.txt
auto_flowcovercuts_on categorical {0, 1} [1]
flowcovercuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_flowpathcuts_on categorical {0, 1} [1]
flowpathcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_gomorypasses_on  categorical {0, 1} [1]
gomorypasses          integer     [1, 64] [16] log      # int in [0, MAXINT], values inspired by http://www.cs.ubc.ca/labs/beta/Projects/MIP-Config/gurobi_params.txt
auto_gubcovercuts_on categorical {0, 1} [1]
gubcovercuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_impliedcuts_on categorical {0, 1} [1]
impliedcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_infproofcuts_on categorical {0, 1} [1]
infproofcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_mipsepcuts_on categorical {0, 1} [1]
mipsepcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_mircuts_on categorical {0, 1} [1]
mircuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_modkcuts_on categorical {0, 1} [1]
modkcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_networkcuts_on categorical {0, 1} [1]
networkcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_projimpliedcuts_on categorical {0, 1} [1]
projimpliedcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_relaxliftcuts_on categorical {0, 1} [1]
relaxliftcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_rltcuts_on categorical {0, 1} [1]
rltcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_strongcgcuts_on categorical {0, 1} [1]
strongcgcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_submipcuts_on categorical {0, 1} [1]
submipcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness
auto_zerohalfcuts_on categorical {0, 1} [1]
zerohalfcuts         integer     [0, 2] [1]   # in increasing order of cut generation aggressiveness

#Conditionals Gurobi parameters
issmethod | auto_issmethod_on == 0
presolve | auto_presolve_on == 0
aggfill | auto_aggfill_on == 0
predual | auto_predual_on == 0
prepasses | auto_prepasses_on == 0
presparsify | auto_presparsify_on == 0
barcorrectors | auto_barcorrectors == 0
barhomogeneous | auto_barhomogeneous == 0
barorder | auto_barorder == 0
crossover | auto_crossover == 0
normadjust | auto_normadjust_on == 0
quad | auto_quad_on == 0
sifting | auto_sifting_on == 0
siftmethod | auto_siftmethod_on == 0
simplexpricing | auto_simplexpricing_on == 0 
branchdir | auto_branchdir_on == 0
degenmoves | auto_degenmoves_on == 0
disconnected | auto_disconnected_on == 0
minrelnodes | auto_minrelnodes_on == 0
nodemethod | auto_nodemethod_on == 0
pumppasses | auto_pumppasses_on == 0
rins | auto_rins_on == 0
varbranch | auto_varbranch_on == 0
zeroobjnodes | auto_zeroobjnodes_on == 0
symmetry | auto_symmetry_on == 0
cuts | auto_cuts_on == 0
cliquecuts | auto_cliquecuts_on == 0
bqpcuts | auto_bqpcuts_on == 0
covercuts | auto_covercuts_on == 0
cutaggpasses | auto_cutaggpasses_on == 0
cutpasses | auto_cutpasses_on == 0
flowcovercuts | auto_flowcovercuts_on == 0
flowpathcuts | auto_flowpathcuts_on == 0
gomorypasses | auto_gomorypasses_on == 0
gubcovercuts | auto_gubcovercuts_on == 0
impliedcuts  | auto_impliedcuts_on == 0
infproofcuts | auto_infproofcuts_on == 0
mipsepcuts | auto_mipsepcuts_on == 0
mircuts | auto_mircuts_on == 0
modkcuts | auto_modkcuts_on == 0
networkcuts | auto_networkcuts_on == 0
projimpliedcuts | auto_projimpliedcuts_on == 0
relaxliftcuts | auto_relaxliftcuts_on == 0
rltcuts | auto_rltcuts_on == 0
strongcgcuts | auto_strongcgcuts_on == 0
submipcuts | auto_submipcuts_on == 0
zerohalfcuts | auto_zerohalfcuts_on == 0
